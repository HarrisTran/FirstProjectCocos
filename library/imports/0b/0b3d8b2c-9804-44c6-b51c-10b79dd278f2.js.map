{"version":3,"sources":["assets/Script/star.ts"],"names":[],"mappings":";;;;;AAAA,oBAAoB;AACpB,wEAAwE;AACxE,mBAAmB;AACnB,kFAAkF;AAClF,8BAA8B;AAC9B,kFAAkF;;;;;;;;;;;;;;;;;;;;;AAE5E,IAAA,KAAsB,EAAE,CAAC,UAAU,EAAlC,OAAO,aAAA,EAAE,QAAQ,cAAiB,CAAC;AAG1C;IAAkC,wBAAY;IAA9C;QAAA,qEAkCC;QA/BG,gBAAU,GAAS,CAAC,CAAC;QAErB,UAAI,GAAG,IAAI,CAAC;;IA6BhB,CAAC;IA3BG,wBAAwB;IAExB,eAAe;IAEf,oBAAK,GAAL;IAEA,CAAC;IAED,qBAAM,GAAN,UAAQ,EAAE;QACN,IAAG,IAAI,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC,UAAU,EAAC;YAC1C,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,OAAQ;SACX;QACD,IAAM,YAAY,GAAG,CAAC,GAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC;QAC9D,IAAM,UAAU,GAAE,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,GAAC,CAAC,GAAG,GAAC,UAAU,CAAC,CAAC,CAAC;IAC/E,CAAC;IACD,uBAAQ,GAAR;QACI,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;QACzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;QACtB,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACxB,CAAC;IACD,gCAAiB,GAAjB;QACI,IAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;QACjD,IAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC;QACrD,OAAO,IAAI,CAAC;IAChB,CAAC;IA9BD;QADC,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC;4CACE;IAHJ,IAAI;QADxB,OAAO;OACa,IAAI,CAkCxB;IAAD,WAAC;CAlCD,AAkCC,CAlCiC,EAAE,CAAC,SAAS,GAkC7C;kBAlCoB,IAAI","file":"","sourceRoot":"/","sourcesContent":["// Learn TypeScript:\n//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html\n// Learn Attribute:\n//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class Star extends cc.Component {\n\n    @property(cc.Float)\n    pickRadius:number =0;\n\n    game = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {}\n\n    start () {\n\n    }\n\n    update (dt) {\n        if(this.getPlayerDistance() < this.pickRadius){\n            this.onPicked();\n            return ;\n        }\n        const opacityRatio = 1-this.game.timer/this.game.starDuration;\n        const minOpacity= 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio*(255-minOpacity));\n    }\n    onPicked() {\n        this.game.spawnNewStar();\n        this.game.gainScore();\n        this.node.destroy();\n    }\n    getPlayerDistance() {\n        const playerPos = this.game.player.getPosition();\n        const dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    }\n}\n"]}